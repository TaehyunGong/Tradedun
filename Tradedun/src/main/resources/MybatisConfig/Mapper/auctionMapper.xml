<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thkong.tradedun.Auction.dao.auctionDao">

	<select id="selectItemDetailList" resultType="ItemDetail">
		SELECT itemId, itemName, itemRarity, itemType, itemTypeDetail, itemAvailableLevel, itemRarityColor
		FROM  ItemDetail
	</select>
	
	<select id='selectBoardNo' resultType="Int">
		SELECT IFNULL(max(boardNo)+1,1) AS boardNo FROM AuctionBoard
	</select>
	
	<insert id='insertAuctionBoard' parameterType="AuctionBoard">
		INSERT INTO AuctionBoard(boardNo, subject, userNo, createDT)
		VALUES(#{boardNo}, #{subject}, #{userNo}, #{createDT})
	</insert>
	
	<insert id='insertAuctionAvatarList' parameterType="java.util.Map">
		INSERT INTO AuctionAvatarList(boardNo, charBox, slotName, avatarNo, avatarName, optionAbility, createDT)
		VALUES
		<foreach collection="list" item="item" separator=" , ">
            (#{item.boardNo}, #{item.charBox}, #{item.slotName}, #{item.avatarNo}, #{item.avatarName}, #{item.optionAbility}, #{item.createDT})
        </foreach>
	</insert>
	
	<insert id='insertAuctionBoardCharBox' parameterType="AuctionBoardCharBox">
		INSERT INTO AuctionBoardCharBox(boardNo, charBox, charId, jobId, jobGrowId, imageName, totalPrice, saleYN, category, comment, createDT)
		VALUES(#{boardNo}, #{charBox}, #{charId}, #{jobId}, #{jobGrowId}, #{imageName}, #{totalPrice}, #{saleYN}, #{category}, #{comment}, #{createDT})
	</insert>
	
	<select id="selectAvatarCategory" resultType="Category" parameterType="String">
		-- 이벤압은 직업구분이 없기때문에 UNION ALL 처리해준다.
		SELECT T1.categoryCode, T1.categoryKind, T1.categoryName, T1.sort
		FROM Category T1
			JOIN (SELECT DISTINCT jobId, jobName, categoryCode
				  FROM AvatarMastar) T2
				ON T1.categoryCode = T2.categoryCode
		WHERE deleteDT IS NULL
		AND categoryKind = 'rare'
		AND T2.jobId = #{jobId}
		UNION ALL 
		SELECT categoryCode, categoryKind, categoryName, sort
		FROM Category
		WHERE deleteDT IS NULL
		AND categoryCode LIKE '%all%'
		ORDER BY sort
	</select>
	
	<select id="selectAllJobList" resultType="CodeTB">
		SELECT code, codeKind, codeName, sort 
		FROM CodeTB
		WHERE deleteDT IS NULL
		AND  codeKind = 'jobId'
		ORDER BY sort
	</select>
	
	<select id="selectRareAvatarList" resultType="AvatarMastar">
		SELECT T1.jobId, T1.jobName, T1.categoryCode, T2.categoryName, T1.avatarSetName
		FROM (SELECT DISTINCT jobId, jobName, categoryCode, avatarSetName
			  FROM AvatarMastar) T1	  
			 JOIN Category T2
			 	  ON T1.categoryCode = T2.categoryCode
			 JOIN CodeTB T3
			 	  ON T1.jobId = T3.code
		ORDER BY T3.sort, T2.sort	 	 
	</select>
	
	<select id="selectAvatarSet" resultType="Avatar" parameterType="AvatarMastar">
		SELECT slotName, avatarNo AS "itemId", avatarName AS "itemName"
		FROM AvatarMastar T1
			JOIN CodeTB T2
				ON T1.slotName = T2.codeName
				AND T2.codeKind = 'slotName'
		WHERE jobId = #{jobId}
		AND categoryCode = #{categoryCode}
		ORDER BY T2.sort
	</select>
	
	<select id="selectJobGrowAllList" resultType="JobGrow">
		SELECT T3.code AS "jobId", T3.codeName AS "jobName", T1.code AS "jobGrowId", T1.codeName AS "jobGrowName", T3.sort jobIdSort, T2.sort jobGrowIdSort
		FROM CodeTB T1
			JOIN CodeTB T2 -- 2차각성만 추출	
				ON T2.codeName LIKE '2차각성%'
				AND T2.codeKind = 'jobUp'
				AND T2.code = T1.code
			JOIN CodeTB T3
				ON T1.refCode = T3.code		
		WHERE T1.codeKind = 'jobGrowId'		
		UNION ALL
		-- 다크나이트와 크리에이트(로직을 만들어줄빠엔 하드코딩해버리는게 더 낫다)
		SELECT	T1.code, T1.codeName, T2.code, T2.codeName, T1.sort, T2.sort
		FROM CodeTB T1
			JOIN CodeTB T2
				ON T2.codeName LIKE '자각2%'
				AND T2.refCode = T1.code
		WHERE T1.code IN ('17e417b31686389eebff6d754c3401ea', 'b522a95d819a5559b775deb9a490e49a') 
		ORDER BY jobIdSort, jobGrowIdSort	
	</select>
	
	<select id="selectJobGrowList" resultType="JobGrow" parameterType="String">
		SELECT T1.code AS "jobGrowId", T1.codeName AS "jobGrowName", T2.sort
		FROM CodeTB T1
			JOIN CodeTB T2 -- 2차각성만 추출, 닼나와 크리는 별도의 조건이 필요해서 OR 처리
				ON (
					T2.codeName LIKE '2차각성%'
					OR
					T2.codeName LIKE '자각2%'
				)
				AND T2.code = T1.code
		WHERE T1.codeKind = 'jobGrowId'
		AND T1.refCode = #{jobId}
		ORDER BY T2.sort
	</select>
	
	<select id="selectAuctionSalesBoard" resultType="AuctionSalesBoard" parameterType="Map">
		SELECT T1.boardNo, T1.subject, T1.jobId, T1.jobGrowId, T1.imageName, T1.totalPrice, T1.category, T1.charBox, T1.createDT
		FROM (
			SELECT T1.boardNo, T1.subject, T2.jobId, T2.jobGrowId, T2.imageName, T2.totalPrice, T2.category, T2.charBox, T1.createDT
				, ROW_NUMBER() OVER() ROWNUM	
			FROM AuctionBoard T1
				JOIN AuctionBoardCharBox T2
					ON T1.boardNo = T2.boardNo
			WHERE 1=1
			<if test="jobId != 'all'">
				AND T2.jobId = #{jobId}
			</if>
			<if test="jobGrowId != 'all'">
				AND T2.jobGrowId = #{jobGrowId}
			</if>
			<if test="categoryCode != 'all'">
				AND T2.category = #{categoryCode}
			</if>
			<if test="totalPrice != 0">
				AND T2.totalPrice <![CDATA[ <= ]]> #{totalPrice} * 10000000
			</if>
			ORDER BY T1.createDT DESC, T2.charBox DESC		
		) T1
		WHERE ROWNUM BETWEEN #{BEGIN} AND #{END} 
	</select>
	
</mapper>